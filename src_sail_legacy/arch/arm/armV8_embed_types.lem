(*Generated by Sail from armV8.sail.*)
open import Pervasives_extra
open import Sail_impl_base
open import Sail_values
type boolean = bitU

type integer' = ii

type uinteger = ii

type reg_size = vector bitU

type reg_index = integer

type SIMD_index = integer

let _PC = Register "_PC" 64 63 false []

let TxNestingLevel = Register "TxNestingLevel" 8 7 false []

let build_TMSTATUS_type regname =
  Register regname 64 63 false 
           [("IMP", (16 , 16));
            ("DBG", (15 , 15));
            ("MEM", (14 , 14));
            ("ERR", (13 , 13));
            ("INV", (12 , 12));
            ("SIZE", (11 , 11));
            ("NEST", (10 , 10));
            ("ABRT", (9 , 9));
            ("RTRY", (8 , 8));
            ("REASON", (4 , 0))]

let data_cache_operation_CVAU = Register "data_cache_operation_CVAU" 64 63 false []

let instruction_cache_operation_IVAU = Register "instruction_cache_operation_IVAU" 64 63 false []

let R30 = Register "R30" 64 63 false []

let R29 = Register "R29" 64 63 false []

let R28 = Register "R28" 64 63 false []

let R27 = Register "R27" 64 63 false []

let R26 = Register "R26" 64 63 false []

let R25 = Register "R25" 64 63 false []

let R24 = Register "R24" 64 63 false []

let R23 = Register "R23" 64 63 false []

let R22 = Register "R22" 64 63 false []

let R21 = Register "R21" 64 63 false []

let R20 = Register "R20" 64 63 false []

let R19 = Register "R19" 64 63 false []

let R18 = Register "R18" 64 63 false []

let R17 = Register "R17" 64 63 false []

let R16 = Register "R16" 64 63 false []

let R15 = Register "R15" 64 63 false []

let R14 = Register "R14" 64 63 false []

let R13 = Register "R13" 64 63 false []

let R12 = Register "R12" 64 63 false []

let R11 = Register "R11" 64 63 false []

let R10 = Register "R10" 64 63 false []

let R9 = Register "R9" 64 63 false []

let R8 = Register "R8" 64 63 false []

let R7 = Register "R7" 64 63 false []

let R6 = Register "R6" 64 63 false []

let R5 = Register "R5" 64 63 false []

let R4 = Register "R4" 64 63 false []

let R3 = Register "R3" 64 63 false []

let R2 = Register "R2" 64 63 false []

let R1 = Register "R1" 64 63 false []

let R0 = Register "R0" 64 63 false []

let V31 = Register "V31" 128 127 false []

let V30 = Register "V30" 128 127 false []

let V29 = Register "V29" 128 127 false []

let V28 = Register "V28" 128 127 false []

let V27 = Register "V27" 128 127 false []

let V26 = Register "V26" 128 127 false []

let V25 = Register "V25" 128 127 false []

let V24 = Register "V24" 128 127 false []

let V23 = Register "V23" 128 127 false []

let V22 = Register "V22" 128 127 false []

let V21 = Register "V21" 128 127 false []

let V20 = Register "V20" 128 127 false []

let V19 = Register "V19" 128 127 false []

let V18 = Register "V18" 128 127 false []

let V17 = Register "V17" 128 127 false []

let V16 = Register "V16" 128 127 false []

let V15 = Register "V15" 128 127 false []

let V14 = Register "V14" 128 127 false []

let V13 = Register "V13" 128 127 false []

let V12 = Register "V12" 128 127 false []

let V11 = Register "V11" 128 127 false []

let V10 = Register "V10" 128 127 false []

let V9 = Register "V9" 128 127 false []

let V8 = Register "V8" 128 127 false []

let V7 = Register "V7" 128 127 false []

let V6 = Register "V6" 128 127 false []

let V5 = Register "V5" 128 127 false []

let V4 = Register "V4" 128 127 false []

let V3 = Register "V3" 128 127 false []

let V2 = Register "V2" 128 127 false []

let V1 = Register "V1" 128 127 false []

let V0 = Register "V0" 128 127 false []

type IMPLEMENTATION_DEFINED_type =
  <| IMPLEMENTATION_DEFINED_type_HaveCRCExt : bitU;
     IMPLEMENTATION_DEFINED_type_HaveAArch32EL : bitU;
     IMPLEMENTATION_DEFINED_type_HaveAnyAArch32 : bitU;
     IMPLEMENTATION_DEFINED_type_HaveEL2 : bitU;
     IMPLEMENTATION_DEFINED_type_HaveEL3 : bitU;
     IMPLEMENTATION_DEFINED_type_HighestELUsingAArch32 : bitU;
     IMPLEMENTATION_DEFINED_type_IsSecureBelowEL3 : bitU; |>

let build_HCR_type regname =
  Register regname 64 63 false 
           [("ID", (33 , 33));
            ("CD", (32 , 32));
            ("RW", (31 , 31));
            ("TRVM", (30 , 30));
            ("HCD", (29 , 29));
            ("TDZ", (28 , 28));
            ("TGE", (27 , 27));
            ("TVM", (26 , 26));
            ("TTLB", (25 , 25));
            ("TPU", (24 , 24));
            ("TPC", (23 , 23));
            ("TSW", (22 , 22));
            ("TACR", (21 , 21));
            ("TIDCP", (20 , 20));
            ("TSC", (19 , 19));
            ("TID3", (18 , 18));
            ("TID2", (17 , 17));
            ("TID1", (16 , 16));
            ("TID0", (15 , 15));
            ("TWE", (14 , 14));
            ("TWI", (13 , 13));
            ("DC", (12 , 12));
            ("BSU", (11 , 10));
            ("FB", (9 , 9));
            ("VSE", (8 , 8));
            ("VI", (7 , 7));
            ("VF", (6 , 6));
            ("AMO", (5 , 5));
            ("IMO", (4 , 4));
            ("FMO", (3 , 3));
            ("PTW", (2 , 2));
            ("SWIO", (1 , 1));
            ("VM", (0 , 0))]

let build_ID_AA64MMFR0_type regname =
  Register regname 64 63 false 
           [("TGran4", (31 , 28));
            ("TGran64", (27 , 24));
            ("TGran16", (23 , 20));
            ("BigEndEL0", (19 , 16));
            ("SNSMem", (15 , 12));
            ("BigEnd", (11 , 8));
            ("ASIDBits", (7 , 4));
            ("PARange", (3 , 0))]

let RVBAR_EL1 = Register "RVBAR_EL1" 64 63 false []

let RVBAR_EL2 = Register "RVBAR_EL2" 64 63 false []

let RVBAR_EL3 = Register "RVBAR_EL3" 64 63 false []

let build_SCRType regname =
  Register regname 32 31 false 
           [("TWE", (13 , 13));
            ("TWI", (12 , 12));
            ("ST", (11 , 11));
            ("RW", (10 , 10));
            ("SIF", (9 , 9));
            ("HCE", (8 , 8));
            ("SMD", (7 , 7));
            ("EA", (3 , 3));
            ("FIQ", (2 , 2));
            ("IRQ", (1 , 1));
            ("NS", (0 , 0))]

let build_SCTLR_EL1_type regname =
  Register regname 32 31 false 
           [("UCI", (26 , 26));
            ("EE", (25 , 25));
            ("E0E", (24 , 24));
            ("WXN", (19 , 19));
            ("nTWE", (18 , 18));
            ("nTWI", (16 , 16));
            ("UCT", (15 , 15));
            ("DZE", (14 , 14));
            ("I", (12 , 12));
            ("UMA", (9 , 9));
            ("SED", (8 , 8));
            ("ITD", (7 , 7));
            ("CP15BEN", (5 , 5));
            ("SA0", (4 , 4));
            ("SA", (3 , 3));
            ("C", (2 , 2));
            ("A", (1 , 1));
            ("M", (0 , 0))]

let build_SCTLR_type regname =
  Register regname 32 31 false 
           [("EE", (25 , 25));
            ("WXN", (19 , 19));
            ("I", (12 , 12));
            ("SA", (3 , 3));
            ("C", (2 , 2));
            ("A", (1 , 1));
            ("M", (0 , 0))]

let build_TCR_EL1_type regname =
  Register regname 64 63 false 
           [("TBI1", (38 , 38));
            ("TBI0", (37 , 37));
            ("AS", (36 , 36));
            ("IPS", (34 , 32));
            ("TG1", (31 , 30));
            ("SH1", (29 , 28));
            ("ORGN1", (27 , 26));
            ("IRGN1", (25 , 24));
            ("EPD1", (23 , 23));
            ("A1", (22 , 22));
            ("T1SZ", (21 , 16));
            ("TG0", (15 , 14));
            ("SH0", (13 , 12));
            ("ORGN0", (11 , 10));
            ("IRGN0", (9 , 8));
            ("EPD0", (7 , 7));
            ("T0SZ", (5 , 0))]

let build_TCR_type regname =
  Register regname 32 31 false 
           [("TBI", (20 , 20));
            ("PS", (18 , 16));
            ("TG0", (15 , 14));
            ("SH0", (13 , 12));
            ("ORGN0", (11 , 10));
            ("IRGN0", (9 , 8));
            ("T0SZ", (5 , 0))]

let TPIDR_EL0 = Register "TPIDR_EL0" 64 63 false []

let TPIDR_EL1 = Register "TPIDR_EL1" 64 63 false []

let TPIDR_EL2 = Register "TPIDR_EL2" 64 63 false []

let TPIDR_EL3 = Register "TPIDR_EL3" 64 63 false []

let build_DBGPRCR_type regname = Register regname 32 31 false [("CORENPDRQ", (0 , 0))]

let build_OSDLR_type regname = Register regname 32 31 false [("DLK", (0 , 0))]

let build_EDSCR_type regname =
  Register regname 32 31 false 
           [("RXfull", (30 , 30));
            ("TXfull", (29 , 29));
            ("ITO", (28 , 28));
            ("RXO", (27 , 27));
            ("TXU", (26 , 26));
            ("PipeAdv", (25 , 25));
            ("ITE", (24 , 24));
            ("INTdis", (23 , 22));
            ("TDA", (21 , 21));
            ("MA", (20 , 20));
            ("NS", (18 , 18));
            ("SDD", (16 , 16));
            ("HDE", (14 , 14));
            ("RW", (13 , 10));
            ("EL", (9 , 8));
            ("A", (7 , 7));
            ("ERR", (6 , 6));
            ("STATUS", (5 , 0))]

let build_TXIDR_EL0_type regname = Register regname 64 63 false [("DEPTH", (7 , 0))]

let build_CurrentEL_type regname = Register regname 32 31 false [("EL", (3 , 2))]

let build_DAIF_type regname =
  Register regname 32 31 false 
           [("D", (9 , 9)); ("A", (8 , 8)); ("I", (7 , 7)); ("F", (6 , 6))]

let build_NZCV_type regname =
  Register regname 32 31 false 
           [("N", (31 , 31)); ("Z", (30 , 30)); ("C", (29 , 29)); ("V", (28 , 28))]

let SP_EL0 = Register "SP_EL0" 64 63 false []

let SP_EL1 = Register "SP_EL1" 64 63 false []

let SP_EL2 = Register "SP_EL2" 64 63 false []

let SP_EL3 = Register "SP_EL3" 64 63 false []

let build_SPSel_type regname = Register regname 32 31 false [("SP", (0 , 0))]

let build_SPSR_type regname =
  Register regname 32 31 false 
           [("N", (31 , 31));
            ("Z", (30 , 30));
            ("C", (29 , 29));
            ("V", (28 , 28));
            ("SS", (21 , 21));
            ("IL", (20 , 20));
            ("E", (9 , 9));
            ("A", (8 , 8));
            ("I", (7 , 7));
            ("F", (6 , 6));
            ("M4", (4 , 4));
            ("M3_0", (3 , 0))]

let ELR_EL1 = Register "ELR_EL1" 64 63 false []

let ELR_EL2 = Register "ELR_EL2" 64 63 false []

let ELR_EL3 = Register "ELR_EL3" 64 63 false []

let build_DBGOSDLR_type regname = Register regname 32 31 false [("DLK", (0 , 0))]

let PSTATE_nRW = Register "PSTATE_nRW" 1 0 false []

let PSTATE_E = Register "PSTATE_E" 1 0 false []

let PSTATE_M = Register "PSTATE_M" 5 4 false []

type AccType =
  AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_DC
  | AccType_IC
  | AccType_AT


type MBReqDomain =
  MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem


type MBReqTypes = MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All


type BranchType =
  BranchType_CALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_JMP
  | BranchType_EXCEPTION
  | BranchType_UNKNOWN


type MoveWideOp = MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K


type DeviceType = DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE


type Fault =
  Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint


type MemAttrHints =
  <| MemAttrHints_attrs : vector bitU;
     MemAttrHints_hints : vector bitU;
     MemAttrHints_transient : bitU; |>

type MemType = MemType_Normal | MemType_Device


type FullAddress = <| FullAddress_physicaladdress : vector bitU; FullAddress_NS : bitU; |>

type PrefetchHint = Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC


type CountOp = CountOp_CLZ | CountOp_CLS | CountOp_CNT


type ExtendType =
  ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX


type RevOp = RevOp_RBIT | RevOp_REV16 | RevOp_REV32 | RevOp_REV64


type ShiftType = ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR


type LogicalOp = LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR


type MemOp = MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH


type MemBarrierOp = MemBarrierOp_DSB | MemBarrierOp_DMB | MemBarrierOp_ISB


type SystemHintOp =
  SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL


type PSTATEField = PSTATEField_DAIFSet | PSTATEField_DAIFClr | PSTATEField_SP


type SystemOp = Sys_AT | Sys_DC | Sys_IC | Sys_TLBI | Sys_SYS


type DCOp = IVAC | ISW | CSW | CISW | ZVA | CVAC | CVAU | CIVAC | CVAP


type ICOp = IALLUIS | IALLU | IVAU


type signalValue = LOw | HIGH


















let TMAbortEffect = build_TMSTATUS_type "TMAbortEffect"

let TMStartEffect = build_TMSTATUS_type "TMStartEffect"

let HCR_EL2 = build_HCR_type "HCR_EL2"

let ID_AA64MMFR0_EL1 = build_ID_AA64MMFR0_type "ID_AA64MMFR0_EL1"

let SCR_EL3 = build_SCRType "SCR_EL3"

let SCTLR_EL1 = build_SCTLR_EL1_type "SCTLR_EL1"

let SCTLR_EL2 = build_SCTLR_type "SCTLR_EL2"

let SCTLR_EL3 = build_SCTLR_type "SCTLR_EL3"

let TCR_EL1 = build_TCR_EL1_type "TCR_EL1"

let TCR_EL2 = build_TCR_type "TCR_EL2"

let TCR_EL3 = build_TCR_type "TCR_EL3"

let DBGPRCR_EL1 = build_DBGPRCR_type "DBGPRCR_EL1"

let OSDLR_EL1 = build_OSDLR_type "OSDLR_EL1"

let EDSCR = build_EDSCR_type "EDSCR"

let TXIDR_EL0 = build_TXIDR_EL0_type "TXIDR_EL0"

let CurrentEL = build_CurrentEL_type "CurrentEL"

let DAIF = build_DAIF_type "DAIF"

let NZCV = build_NZCV_type "NZCV"

let SPSel = build_SPSel_type "SPSel"

let SPSR_EL1 = build_SPSR_type "SPSR_EL1"

let SPSR_EL2 = build_SPSR_type "SPSR_EL2"

let SPSR_EL3 = build_SPSR_type "SPSR_EL3"

let SCR = build_SCRType "SCR"

let DBGOSDLR = build_DBGOSDLR_type "DBGOSDLR"

let DBGPRCR = build_DBGPRCR_type "DBGPRCR"

type MemoryAttributes = <| MemoryAttributes_type' : MemType; MemoryAttributes_shareable : bitU; |>

type regfps = list regfp

type niafps = list niafp



type read_buffer_type =
  <| read_buffer_type_acctype : AccType;
     read_buffer_type_exclusive : bitU;
     read_buffer_type_address : vector bitU;
     read_buffer_type_size : uinteger; |>

type write_buffer_type =
  <| write_buffer_type_acctype : AccType;
     write_buffer_type_exclusive : bitU;
     write_buffer_type_address : vector bitU;
     write_buffer_type_value : vector bitU;
     write_buffer_type_size : uinteger; |>



type FaultRecord =
  <| FaultRecord_type' : Fault;
     FaultRecord_acctype : AccType;
     FaultRecord_ipaddress : vector bitU;
     FaultRecord_s2fs1walk : bitU;
     FaultRecord_write : bitU;
     FaultRecord_level : uinteger;
     FaultRecord_extflag : bitU;
     FaultRecord_secondstage : bitU;
     FaultRecord_domain : vector bitU;
     FaultRecord_debugmoe : vector bitU; |>

type ast =
  | Unallocated
  | ImplementationDefinedTestBeginEnd of (bitU)
  | ImplementationDefinedStopFetching
  | ImplementationDefinedThreadStart
  | TMStart of (reg_index)
  | TMCommit
  | TMAbort of (bitU * vector bitU)
  | TMTest
  | CompareAndBranch of (reg_index * integer * bitU * vector bitU)
  | BranchConditional of (vector bitU * vector bitU)
  | GenerateExceptionEL1 of (vector bitU)
  | GenerateExceptionEL2 of (vector bitU)
  | GenerateExceptionEL3 of (vector bitU)
  | DebugBreakpoint of (vector bitU)
  | ExternalDebugBreakpoint
  | DebugSwitchToExceptionLevel of (vector bitU)
  | MoveSystemImmediate of (vector bitU * PSTATEField)
  | Hint of (SystemHintOp)
  | ClearExclusiveMonitor of (uinteger)
  | Barrier of (MemBarrierOp * MBReqDomain * MBReqTypes)
  | DataCache of (reg_index * DCOp)
  | InstructionCache of (reg_index * ICOp)
  | System of (reg_index * uinteger * uinteger * uinteger * uinteger * uinteger * bitU)
  | MoveSystemRegister of (reg_index * uinteger * uinteger * uinteger * uinteger * uinteger * bitU)
  | TestBitAndBranch of (reg_index * integer * uinteger * bitU * vector bitU)
  | BranchImmediate of (BranchType * vector bitU)
  | BranchRegister of (reg_index * BranchType)
  | ExceptionReturn
  | DebugRestorePState
  | LoadLiteral of (reg_index * MemOp * bitU * uinteger * vector bitU * integer)
  | LoadStoreAcqExc of (reg_index * reg_index * reg_index * reg_index * AccType * bitU * bitU * MemOp * uinteger * integer * integer)
  | LoadStorePairNonTemp of (bitU * bitU * reg_index * reg_index * reg_index * AccType * MemOp * uinteger * integer * vector bitU)
  | LoadImmediate of (reg_index * reg_index * AccType * MemOp * bitU * bitU * bitU * vector bitU * integer * integer)
  | LoadRegister of (reg_index * reg_index * reg_index * AccType * MemOp * bitU * bitU * bitU * ExtendType * uinteger * integer * integer)
  | LoadStorePair of (bitU * bitU * reg_index * reg_index * reg_index * AccType * MemOp * bitU * integer * vector bitU)
  | AddSubImmediate of (reg_index * reg_index * integer * bitU * bitU * vector bitU)
  | BitfieldMove of (reg_index * reg_index * integer * bitU * bitU * uinteger * uinteger * vector bitU * vector bitU)
  | ExtractRegister of (reg_index * reg_index * reg_index * integer * uinteger)
  | LogicalImmediate of (reg_index * reg_index * integer * bitU * LogicalOp * vector bitU)
  | MoveWide of (reg_index * integer * vector bitU * uinteger * MoveWideOp)
  | Address of (reg_index * bitU * vector bitU)
  | AddSubExtendRegister of (reg_index * reg_index * reg_index * integer * bitU * bitU * ExtendType * integer)
  | AddSubShiftedRegister of (reg_index * reg_index * reg_index * integer * bitU * bitU * ShiftType * integer)
  | AddSubCarry of (reg_index * reg_index * reg_index * integer * bitU * bitU)
  | ConditionalCompareImmediate of (reg_index * integer * bitU * vector bitU * vector bitU * vector bitU)
  | ConditionalCompareRegister of (reg_index * reg_index * integer * bitU * vector bitU * vector bitU)
  | ConditionalSelect of (reg_index * reg_index * reg_index * integer * vector bitU * bitU * bitU)
  | Reverse of (reg_index * reg_index * integer * RevOp)
  | CountLeading of (reg_index * reg_index * integer * CountOp)
  | Division of (reg_index * reg_index * reg_index * integer * bitU)
  | Shift of (reg_index * reg_index * reg_index * integer * ShiftType)
  | CRC of (reg_index * reg_index * reg_index * integer * bitU)
  | MultiplyAddSub of (reg_index * reg_index * reg_index * reg_index * integer * integer * bitU)
  | MultiplyAddSubLong of (reg_index * reg_index * reg_index * reg_index * integer * integer * bitU * bitU)
  | MultiplyHigh of (reg_index * reg_index * reg_index * reg_index * integer * integer * bitU)
  | LogicalShiftedRegister of (reg_index * reg_index * reg_index * integer * bitU * LogicalOp * ShiftType * integer * bitU)


type AddressDescriptor =
  <| AddressDescriptor_fault : FaultRecord;
     AddressDescriptor_memattrs : MemoryAttributes;
     AddressDescriptor_paddress : FullAddress; |>



