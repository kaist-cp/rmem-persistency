(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Christopher Pulte, University of Cambridge 2017-2018               *)
(*  Copyright Shaked Flur, University of Cambridge            2017               *)
(*  Copyright Jon French, University of Cambridge             2018               *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

open import Relation
open import Pervasives_extra
open import Sail_impl_base
open import InstructionSemantics
open import ExceptionTypes
open import FreshIds
open import Events
open import InstructionKindPredicates
open import Fragments
open import Debug
open import Utils
open import Params
open import Isa
open import RegUtils
     import Map
open import PromisingViews
open import PromisingTransitions
open ListMonad

let is_RISC isa =
  match isa.isa_model with
  | RISCV -> true
  | _ -> false
  end




(******************** Promising Thread Subsystem *******************)

type addrNat = nat

type instruction_info 'i =
  <| ii_ioid: ioid; (*: Chosen to make every instance unique :*)
     ii_id_state: id_state ioid; (*: generating unique IDs for events :*)
     ii_program_loc: address;  (*: record fetched address :*)
     ii_program_opcode: maybe opcode;  (*: record fetched opcode :*)
     ii_instruction: 'i; (*:  assembly AST instruction,:*)

     ii_kind: instruction_kind;
     ii_regs_feeding_address: list reg_name;
     ii_reg_reads: list (reg_name * register_value);
     ii_reg_writes: list (reg_name * register_value);

     ii_writes_read_from : list (read_request * (list (write * slices)));
     ii_propagated_writes: list write;
     (* ii_committed_barriers: list barrier; *)
  |>

let init_instruction_info ioid addr opcode i =
  <| ii_ioid = ioid;
     ii_id_state = FreshIds.initial_id_state ioid;
     ii_program_loc = addr;
     ii_program_opcode = opcode;
     ii_instruction = i;

     ii_kind = IK_simple;
     ii_regs_feeding_address = [];
     ii_reg_reads = [];
     ii_reg_writes = [];

     ii_writes_read_from = [];
     ii_propagated_writes = [];
     (* ii_committed_barriers = []; *)
  |>



type pts 'i 'v = 
  (* dynamic *)
  <| reg : map reg_base_name register_value
   ; vReg  : map reg_base_name 'v
   ; vCoh  : map address 'v
   ; vRm   : 'v
   ; vRp   : 'v
   ; vWm   : 'v
   ; vWp   : 'v
   ; vCAP  : 'v
   ; vRel  : 'v
   ; vPn   : 'v
   ; vlPer : map address 'v
   ; vPer  : map address 'v
   ; fwd_bank : map address (w_eiid * bool * 'v)
   ; xcl_bank : maybe ((w_eiid * address) * 'v) (* v is read exclusive view, for RISCV *)
   ; promises : set (w_eiid * 'v * address * bool) (* bool is whether thread start *)
   ; initAddr : maybe address
   ; retAddr  : address
   ; cia      : maybe address
   ; ids      : id_state thread_id
   ; wids     : Map.map addrNat nat
   ; raised_exception: maybe (exception_type 'i)
   (* static *)
   ; prog     : address -> fetch_and_decode_outcome 'i
   ; tid      : thread_id
   ; regdata  : registerdata
   (* information for user-interface purposes only *)
   ; instrs   : list (instruction_info 'i)
   ; initRegS : (reg_base_name -> register_value)
  |>

(*  *)



(** Thread Subsystem **********************************************************)
(*  Auxiliaries ***************************************************************)


let inline reg r s =
  match Map.lookup r s.reg with
  | Just v -> v
  | Nothing -> register_state_zero s.regdata s.tid r
  end
let vReg r s = findBot r s.vReg
let vCoh addr s = findBot addr s.vCoh
let fwd_bank addr s = Map.lookup addr s.fwd_bank
let regdata r s  = ensure_just (reg_from_data s.regdata r) (show r)

let set_reg r x s = <| s with reg = Map.insert r x s.reg |>
let set_vReg r t s = <| s with vReg = Map.insert r t s.vReg |>

let inc_vmap m k v' = 
  let v = Map.findWithDefault k bot m in
  Map.insert k (join v v') m

let remove_promise wid promises = 
  Set.filter (fun (w,_,_,_) -> w <> wid) promises



let gen_fresh_wid addr s = 
  let addr = natFromInteger (integer_of_address addr) in
  let n = findWithDefault addr 0 s.wids in
  let next = n+1 in
  let id = ((s.tid,addr),n) in
  let wids = Map.insert addr next s.wids in
  let s = <| s with wids = wids |> in
  (s,id)



(* let make_tc s = make_thread_cont_res Set.empty Set.empty (toPTS s)
 * let make_tc' s = make_thread_cont_res Set.empty Set.empty s *)
let addr_of_addr_lifted a = 
  ensure_just (address_of_address_lifted a) "fail" 


let promising_find_instruction
    (p : list (instruction_info 'i) -> instruction_info 'i -> bool) 
    (s : pts 'i 'v)
  : maybe (list (instruction_info 'i) * instruction_info 'i) = 
  let aux : list (maybe (list (instruction_info 'i) * instruction_info 'i)) =
    mapWithContext
      (fun prefix instr suffix ->
        if p prefix instr then Just (prefix,instr) else Nothing)
      (List.reverse s.instrs) in
  let aux = List.mapMaybe id aux in
  index aux 0


let p_registers_final_state s = 
  List.map (fun (rbn,_) -> (rbn, Just (reg rbn s))) s.regdata

let p_update_initial_register_state t updates = 
  List.foldl (fun s (x,y) -> set_reg x y s) t updates

let p_update_initial_fetch_address isa (t : pts 'i 'v) mv = 
  let cia_reg = isa.cia_reg in
  let dir = direction_of_reg_name cia_reg in
  let addr_rv = register_value_of_memory_value mv dir in
  let addr = ensure_just (address_of_register_value addr_rv) "fail" in
  let ts = 
    <| t with reg = Map.insert (register_base_name cia_reg) addr_rv t.reg;
              initAddr = Just addr;
              cia      = Just addr; |>
  in
  (ts,addr)


let inline dummy_ioid tid : ioid = (tid,0)
let inline dummy_eiid tid : eiid = (dummy_ioid tid,0)


let make_write_events_aux isa s ii (wk,addr,sz,memv) =
  let (writes, _) =
    isa.make_empty_write_events s.tid
      ii.ii_instruction ii.ii_id_state ii.ii_ioid
      (addr,sz) wk in
  let (s,wid) = gen_fresh_wid addr s in
  let writes = match memv with
    | Just memv -> Events.set_write_values memv writes []
    | Nothing -> writes
  end in
  let write = ensure_singleton writes
                "no/multiple write events generated for store" in
  let write = <| write with w_ioid = dummy_ioid s.tid; weiid = wid |> in
  (s,write)

let make_write_events isa s ii (wk,addr,sz,memv) =
  make_write_events_aux isa s ii (wk,addr,sz, Just memv)

(* hard coded special address for thread start *)
let thread_start_write_address = address_of_integer 0

let make_thread_start_write_events isa s ii mv =
  let size = List.length mv in
  make_write_events_aux isa s ii
    (Write_plain, thread_start_write_address, size, Just mv)


let make_read_events isa tid ii (rk,addr,sz) = 
  let (read_requests, id_state') =
    isa.make_read_request_events tid 
      ii.ii_instruction ii.ii_id_state ii.ii_ioid
      (addr, sz) rk in
  let rrs_and_unsat_slices =
    [(rr, [complete_slice rr.r_addr]) | forall (rr MEM read_requests) | true] in
  let (rr,unsat_slices) =
    ensure_singleton rrs_and_unsat_slices
      "no/multiple write events generated for load" in
  let ii = <| ii with ii_id_state = id_state'|> in
  (ii,rr)


(* let record_barrier_event params tid ii bk = 
 *   let (barrier, id_state') =
 *     Events.make_barrier_event ii.ii_id_state tid ii.ii_ioid bk in
 *   let ii = <| ii with ii_id_state = id_state'; 
 *                       ii_committed_barrriers = [barrier] |> in
 *   ii *)



let do_read ii rr w =
  let mrs = possible_mrs_for_read rr.r_addr [write_with_complete_slice w] in
  let ii = <| ii with ii_writes_read_from = [(rr,mrs.mrs_writes_read_from)] |> in
  (ii, mrs.mrs_value)


let reg_value r s = 
  let rbn = register_base_name r in
  let (v,base_reg) = (reg rbn s, regdata rbn s) in 
  let (left,found) =
    match_maybe_value_fragment
      [slice_of_reg_name r] (slice_of_reg_name base_reg, Just v.rv_bits) in
  let () = ensure (null left) "fail" in
  ensure_just (reassemble_register_value r found) "fail"

let update_reg_value r v' s =
  let rbn = register_base_name r in
  let v = reg rbn s in
  let base_reg = regdata rbn s in
  let (left,found) = 
    match_maybe_value_fragments
      [slice_of_reg_name base_reg]
      [(slice_of_reg_name r, Just v'.rv_bits);
       (slice_of_reg_name base_reg, Just v.rv_bits)]
      []
  in
  let () = ensure (null left) "fail" in
  let v'' = ensure_just (reassemble_register_value base_reg found) "fail" in
  set_reg rbn v'' s


let cia_of_reg_state isa s = 
  let cia_rv = reg_value isa.cia_reg s in
  let cia_al = ensure_just (address_lifted_of_register_value cia_rv) "fail" in
  let cia_a = addr_of_addr_lifted cia_al in
  (cia_rv,cia_a)

let nia_of_reg_state isa s = 
  let nia_rv = reg_value isa.nia_reg s in
  let nia_al = ensure_just (address_lifted_of_register_value nia_rv) "fail" in
  let nia_a = addr_of_addr_lifted nia_al in
  (nia_rv,nia_a)

let p_initial_thread_state
    (isa : isa 'i)
    (tid : thread_id)
    (prog : address -> fetch_and_decode_outcome 'i)
    (ret_addr : address)
    (rd : registerdata)
    (ird : list (reg_base_name * register_value))
    (irv : reg_base_name -> register_value)
    (addr : maybe address)
    (iws : list write)
  : (pts 'i 'v) =
  let ws = List.map (fun w -> (fst w.w_addr,bot)) iws in
  let vCoh = Map.fromList ws in
  let reg = List.foldl (fun m (rbn,v) -> Map.insert rbn v m) Map.empty ird in
  let reg = match addr with
    | Just addr ->
       let cia_reg = isa.cia_reg in
       let rv = register_value_of_address addr (direction_of_reg_name cia_reg) in
       Map.insert (register_base_name cia_reg) rv reg
    | Nothing -> reg
    end in
  let tReg = List.foldl (fun m (n,_) -> Map.insert n bot m) Map.empty ird in

  let s = <| reg = reg
           ; vCoh  = vCoh
           ; vReg  = tReg
           ; vRm   = bot
           ; vRp   = bot
           ; vWm   = bot
           ; vWp   = bot
           ; vCAP  = bot
           ; vRel  = bot
           ; vPn   = bot
           ; vlPer = vCoh
           ; vPer  = vCoh
           ; fwd_bank = Map.empty
           ; xcl_bank = Nothing
           ; promises = Set.empty
           ; prog     = prog
           ; retAddr  = ret_addr
           ; initAddr = addr
           ; cia      = addr
           ; tid      = tid
           ; ids      = FreshIds.initial_id_state tid
           ; wids     = Map.empty
           ; regdata  = rd
           ; instrs   = []
           ; initRegS = irv
           ; raised_exception = Nothing;
           |>
  in
  List.foldl (fun s (r,v) -> update_reg_value r v s)
    s isa.fixed_pseudo_registers


type istate 'i 'v 'o  = (instruction_info 'i * 'v * 'o)
type iconf' 'i 'v 'o = (pts 'i 'v * istate 'i 'v 'o)
type iconf 'i 'v = (pts 'i 'v * istate 'i 'v (outcome unit))


(* these do not handle mixed-size register accesses *)
let read_reg ((ts,(ii,view,o)) : iconf' 'i 'v (register_value -> 'o)) r = 
  let rbn = register_base_name r in
  let (v,view') = (reg_value r ts, vReg rbn ts) in
  let ii = <| ii with ii_reg_reads = (r,v) :: ii.ii_reg_reads |> in
  (ts,(ii,join view view',o v))

let write_reg ((ts,(ii,view,o)) : iconf' 'i 'v 'o) (r,v,rview) = 
  let rbn = register_base_name r in
  let ii = <| ii with ii_reg_writes = (r,v) :: ii.ii_reg_writes |> in
  let ts = ts $> update_reg_value r v
              $> set_vReg rbn rview in
  (ts,(ii,view,o))


let rec do_internal_steps ((ts,(ii,view,o)) : iconf 'i 'v) = 
  match o with
  | O_Internal _ o -> do_internal_steps (ts,(ii,view,o))
  | _ -> (ts,(ii,view,o))
end

let rec do_local_effs ((ts,(ii,view,o)) : iconf 'i 'v) = 
  match o with
  | O_Done () ->           (ts,(ii,view,o))
  | O_Read_mem _ _ ->      (ts,(ii,view,o))
  | O_Write_ea _ _ ->      (ts,(ii,view,o))
  | O_Write_memv _ _ ->    (ts,(ii,view,o))
  | O_Barrier _ _ ->       (ts,(ii,view,o))
  | O_Excl_res _ ->        (ts,(ii,view,o))
  | O_Read_reg r o ->      do_local_effs (read_reg (ts,(ii,view,o)) r)
  | O_Write_reg (r,v) o -> do_local_effs (write_reg (ts,(ii,view,o)) (r,v,view))
  | O_Internal _ o ->      do_local_effs (ts,(ii,view,o))
  | O_Escape Nothing ->    failwith ("escape Nothing")
  | O_Escape (Just err) -> failwith ("escape " ^ err)
  | O_Error err ->         failwith ("unhandled Error " ^ err)
  | O_Fail (Just msg) ->   failwith ("Sail assertion: Fail '" ^ msg ^ "'")
  | O_Fail Nothing ->      failwith ("Sail assertion: Fail")
  | O_Footprint o ->       failwith "footprint recalculation not supported"
  | O_Cache_op _ _ ->      (ts,(ii,view,o))
end

(* stolen from machineDefThreadSubsystem *)
let reached_loop_limit params s = 
  let addr = ensure_just s.cia "must have cia set" in
  match (params.t.thread_loop_unroll_limit, s.instrs) with
  | (Nothing, _) -> false
  | (_, [])      -> false
  | (Just limit, iprev :: _) ->
     addr <= iprev.ii_program_loc
     && exists (i MEM s.instrs). i.ii_program_loc = addr
     && (_count_pairs_aux s.instrs (fun ii -> ii.ii_program_loc)
           iprev.ii_program_loc addr 0) + 1 >= limit
  end



let write_cia_arm has_branched isa (ts,(ii,view,o)) = 
  let cia_reg = isa.cia_reg in
  let cia_rbn = register_base_name cia_reg in
  if has_branched then
    let cia_a = snd (cia_of_reg_state isa ts) in
    let ts = <| ts with cia = Just cia_a |> in
    (ts,(ii,view,o))
  else
    let cia_v = add_address_nat ii.ii_program_loc 4 in
    let v = register_value_of_address cia_v (direction_of_reg_name cia_reg) in
    let ts = set_reg cia_rbn v ts in
    let ts = set_vReg cia_rbn bot ts in
    let ts = <| ts with cia = Just cia_v |> in
    (ts,(ii,view,o))

let write_cia_nia_riscv has_branched isa (ts,(ii,view,o)) = 
  let cia_reg = isa.cia_reg in
  let cia_rbn = register_base_name cia_reg in
  let nia_reg = isa.nia_reg in
  let nia_rbn = register_base_name nia_reg in
  if has_branched then
    let (nia_rv,nia_a) = nia_of_reg_state isa ts in
    let ts = set_reg cia_rbn nia_rv ts in
    let ts = set_vReg cia_rbn bot ts in
    let ts = <| ts with cia = Just nia_a |> in
    (ts,(ii,view,o))
  else
    let nia_v = add_address_nat ii.ii_program_loc 4 in
    let v = register_value_of_address nia_v (direction_of_reg_name nia_reg) in
    let ts = set_reg nia_rbn v ts in
    let ts = set_vReg nia_rbn bot ts in
    let ts = set_reg cia_rbn v ts in
    let ts = set_vReg cia_rbn bot ts in
    let ts = <| ts with cia = Just nia_v |> in
    (ts,(ii,view,o))

let write_cia_nia has_branched isa ((ts,(ii,view,o)) : iconf 'i 'v) = 
  match isa.isa_model with
  | AARCH64 _ -> write_cia_arm has_branched isa (ts,(ii,view,o))
  | RISCV -> write_cia_nia_riscv has_branched isa (ts,(ii,view,o))
  | _ -> fail
  end

let finish_non_branch_instruction isa ((ts,(ii,view,o)) : iconf 'i 'v) = 
  let () = ensure_done_outcome o in
  let (ts,(ii,view,o)) = write_cia_nia false isa (ts,(ii,view,o)) in
  let ts = <| ts with instrs = ii :: ts.instrs |> in
  (ts,ii)

val make_plain_transition :
  forall 'i 'v 'pss. View 'v => 
  pts 'i 'v * instruction_info 'i ->
  list (pt_trans 'i (pts 'i 'v) 'pss 'v)
let make_plain_transition (s,ii) =
  return (PT_finish (s.tid,ii.ii_ioid) (ii.ii_program_loc,ii.ii_instruction) s)

let run_barrier_instruction isa ((s,(ii,view,o)) : iconf 'i 'v)
    : list (pt_trans 'i (pts 'i 'v) 'pss 'v) = 
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  let (bk,o) = ensure_barrier_outcome o in
  (* let ii = record_barrier_event params s.tid ii bk in *)
  let (Rp,Wp) = match bk with
    | Barrier_DMB (dom, typ) ->
        let () = ensure (dom = A64_FullShare || dom = A64_InnerShare) "Barrier domain not supported" in
        match typ with
        | A64_barrier_all -> ([s.vRm;s.vWm], [s.vRm;s.vWm])
        | A64_barrier_LD  -> ([s.vRm]      , [s.vRm])
        | A64_barrier_ST  -> ([]           , [s.vWm])
        end
    | Barrier_DSB (dom, typ) ->
        let () = ensure (dom = A64_FullShare || dom = A64_InnerShare) "Barrier domain not supported" in
        match typ with
        | A64_barrier_all -> ([s.vRm;s.vWm], [s.vRm;s.vWm])
        | A64_barrier_LD  -> ([s.vRm]      , [s.vRm])
        | A64_barrier_ST  -> ([]           , [s.vWm])
        end
    | Barrier_ISB ->    ([s.vCAP]     , [s.vCAP])

    | Barrier_RISCV_rw_rw -> ([s.vRm;s.vWm], [s.vRm;s.vWm])
    | Barrier_RISCV_r_rw -> ([s.vRm], [s.vRm])
    | Barrier_RISCV_w_rw -> ([s.vWm], [s.vWm])
    | Barrier_RISCV_rw_r -> ([s.vRm;s.vWm], [])
    | Barrier_RISCV_r_r -> ([s.vRm], [])
    | Barrier_RISCV_w_r -> ([s.vWm], [])
    | Barrier_RISCV_rw_w -> ([], [s.vRm;s.vWm])
    | Barrier_RISCV_r_w -> ([], [s.vRm])
    | Barrier_RISCV_w_w -> ([], [s.vWm])
    | Barrier_RISCV_tso -> ([s.vRm], [s.vRm;s.vWm])
    | Barrier_RISCV_i -> ([]     , [])

    | _ -> failwith ("cannot handle this barrier: " ^ show bk)
    end in
  let Pn = match bk with
    | Barrier_DMB (dom, typ) ->
        let () = ensure (dom = A64_FullShare || dom = A64_InnerShare) "Barrier domain not supported" in
        match typ with
        | A64_barrier_all -> [s.vRm;s.vWm]
        | _ -> []
        end
    | Barrier_DSB (dom, typ) ->
        let () = ensure (dom = A64_FullShare || dom = A64_InnerShare) "Barrier domain not supported" in
        match typ with
        | A64_barrier_all -> [s.vRm;s.vWm]
        | _ -> []
        end
    | _ -> []
    end in
  let per = match bk with
    | Barrier_DSB (dom, typ) ->
        let () = ensure (dom = A64_FullShare || dom = A64_InnerShare) "Barrier domain not supported" in
        match typ with
        | A64_barrier_all -> s.vlPer
        | _ -> s.vPer
        end
    | _ -> s.vPer
    end in
  let s = <| s with vRp = joinS (s.vRp :: Rp);
                    vWp = joinS (s.vWp :: Wp);
                    vPn = joinS (s.vPn :: Pn);
                    vPer = per; |> in
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  make_plain_transition (finish_non_branch_instruction isa (s,(ii,view,o)))

val make_loop_limit_reached_transition :
  forall 'i 'v 'pss. View 'v => 
  pts 'i 'v * instruction_info 'i ->
  list (pt_trans 'i (pts 'i 'v) 'pss 'v)

let make_loop_limit_reached_transition (s,ii) =
  let s' = <| s with raised_exception = Just ET_loop_limit_reached |> in
  return (PT_exception (s.tid,ii.ii_ioid) ET_loop_limit_reached s')

let has_branched isa ii =
  match isa.isa_model with
  | AARCH64 _ -> isJust (List.lookup isa.cia_reg ii.ii_reg_writes)
  | RISCV ->  isJust (List.lookup isa.nia_reg ii.ii_reg_writes)
  | _ -> fail
  end


let run_branch_instruction params isa ((ts,(ii,view,o)) : iconf 'i 'v)
    : list (pt_trans 'i (pts 'i 'v) 'pss 'v) = 
  let ii = <| ii with ii_kind = IK_branch |> in
  let (ts,(ii,view,o)) = do_local_effs (ts,(ii,view,o)) in
  let ts = <| ts with vCAP = join ts.vCAP view |> in
  let () = ensure_done_outcome o in
  let has_branched = has_branched isa ii in
  let (ts,(ii,view,o)) = write_cia_nia has_branched isa (ts,(ii,view,o)) in
  let ts = <| ts with instrs = ii :: ts.instrs |> in
  if has_branched && reached_loop_limit params ts 
  then make_loop_limit_reached_transition (ts,ii)
  else make_plain_transition (ts,ii)


let run_plain_instruction isa ((s,(ii,view,o)) : iconf 'i 'v)
    : list (pt_trans 'i (pts 'i 'v) 'pss 'v) =
  let ii = <| ii with ii_kind = IK_simple |> in
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  make_plain_transition (finish_non_branch_instruction isa (s,(ii,view,o)))

let run_failed_store_exclusive_instruction isa
      ((s,(ii,_view,o)) : iconf 'i 'v)
    : list (pt_trans 'i (pts 'i 'v) 'pss 'v) = 
  let view = bot in (* revisit to check if still good *)
  let s = <| s with xcl_bank = Nothing |> in
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  let (s,ii) = finish_non_branch_instruction isa (s,(ii,view,o)) in
  return (PT_failed_store_excl (s.tid,ii.ii_ioid) s)

let run_amo_instruction isa ((s,(ii,view,o)) : iconf 'i 'v) = 
  failwith "AMO instruction not supported yet."

let set_regs_feeding_address_regs_so_far ii = 
  let regs_so_far = List.map fst ii.ii_reg_reads in
  <| ii with ii_regs_feeding_address = regs_so_far |>

let run_load_instruction 
      params
      isa 
      ((s,(ii,view,o)) : iconf 'i 'v) 
      (pss_sem : pss_sem 'pss 'v)
      (pss : 'pss)
    : list (pt_trans 'i (pts 'i 'v) 'pss 'v) 
  = 
  let (s,(ii,addr_view,o)) = do_local_effs (s,(ii,view,o)) in
  let ii = set_regs_feeding_address_regs_so_far ii in
  let ((rk,addr,sz),c) = ensure_read_mem_outcome o in
  let addr = addr_of_addr_lifted addr in
  let (ii,rr) = make_read_events isa s.tid ii (rk,addr,sz) in
  let pre_view =
    joinS [addr_view;
           s.vRp;
           ifV (is_strong_acquire_R rk) s.vRel;
           ifV (is_release_R rk) s.vRm;
           ifV (is_release_R rk) s.vWm
      ] in
  let sh = if in_shared_memory params (addr,sz) then Shared else NonShared in
  let view_constraint = join (vCoh addr s) pre_view in
  pss_sem.handle_read pss rr view_constraint sh >>= fun (w,t) ->
  let (ii,mv) = do_read ii rr w in
  let ii = <| ii with ii_kind = IK_mem_read rk |> in
  let rf_view = match fwd_bank addr s with
    | Nothing -> t
    | Just (fwd_weiid,wx,fwd_view) -> 
       if fwd_weiid = w.weiid && ((is_RISC isa || is_acquire_R rk) --> not wx)
       then fwd_view else t
    end 
  in 
  let post_view = join pre_view rf_view in
  let s = 
    <| s with vCoh = inc_vmap s.vCoh addr post_view;
              vRm  = join s.vRm post_view;
              vCAP = join s.vCAP addr_view;
              vRp  = join s.vRp (ifV (is_acquire_R rk) post_view);
              vWp  = join s.vWp (ifV (is_acquire_R rk) post_view);
              vRel = join s.vRel (ifV (is_strong_release_R rk) post_view);
              xcl_bank = if is_exclusive_R rk 
                         then Just ((w.weiid,addr),post_view) else s.xcl_bank;
      |>
  in
  let (s,(ii,view,o)) = do_local_effs (s,(ii,post_view,c mv)) in
  let s = fst (finish_non_branch_instruction isa (s,(ii,view,o))) in
  return (PT_Read (s.tid,ii.ii_ioid) (rr,view_constraint) (w,t) s)



(* see also run_store_exclusive_instruction *)
let run_store_instruction
      params
      isa
      xinfo
      ((s,(ii,view,o)) : iconf 'i 'v)
      (pss_sem : pss_sem 'pss 'v)
      (pss : 'pss)
      : list (pt_trans 'i (pts 'i 'v) 'pss 'v)
  = 
  let (s,(ii,addr_view,o)) = do_local_effs (s,(ii,view,o)) in
  let ii = set_regs_feeding_address_regs_so_far ii in
  let ((wk,addr,sz),o) = ensure_write_ea_outcome o in 
  let addr = addr_of_addr_lifted addr in
  let (s,(ii,addr_data_view,o)) = do_local_effs (s,(ii,addr_view,o)) in
  let (mv,c) = ensure_write_memv_outcome o in
  let (s,w) = make_write_events isa s ii (wk,addr,sz,mv) in
  let pre_view = 
    joinS [addr_data_view; 
           s.vCAP;
           s.vWp;
           ifV (is_release_W wk) s.vRm;
           ifV (is_release_W wk) s.vWm;
           ifV (is_strong_acquire_W wk) s.vRel;
           ifV (is_exclusive_W wk && is_RISC isa) 
             (mV (Maybe.map snd xinfo))]
  in
  let (req_view : 'v) = join pre_view (vCoh addr s) in
  let wd = <| wd_w = w; 
              wd_rexinfo = Maybe.map fst xinfo; 
              wd_req_view = req_view;
              wd_is_thread_start = false |> in
  let ii = <| ii with ii_kind = IK_mem_write wk;
                      ii_propagated_writes = [w] |> in
  let c post_view = 
    let s = 
      <| s with vCoh = inc_vmap s.vCoh addr post_view;
                vCAP = join s.vCAP addr_view;
                vWm  = join s.vWm post_view;
                vRel = join s.vRel (ifV (is_strong_release_W wk) post_view);
                vRp  = join s.vRp (ifV (is_acquire_W wk) post_view);
                vWp  = join s.vWp (ifV (is_acquire_W wk) post_view);
                xcl_bank = if is_exclusive_W wk then Nothing else s.xcl_bank;
                fwd_bank = let e = (w.weiid,is_exclusive_W wk, addr_data_view) in
                           Map.insert addr e s.fwd_bank;
                promises = remove_promise w.weiid s.promises
      |>
    in
    let (s,(ii,view,o)) = do_local_effs (s,(ii,post_view,c true)) in
    fst (finish_non_branch_instruction isa (s,(ii,view,o)))
  in
  if exists ((p,_,_,_) IN s.promises). p = w.weiid then
    pss_sem.handle_fulfil pss wd >>= fun (post_view,_) ->
    return (PT_Fulfil (s.tid,ii.ii_ioid) wd (post_view,Nothing) (c post_view))
  else
    let sh = if in_shared_memory params (addr,sz) then Shared else NonShared in
    pss_sem.handle_write pss wd sh >>= fun (post_view,pss,_) ->
    return (PT_Write (s.tid,ii.ii_ioid) (wd,NonPromise,sh)
              (post_view,Nothing) (c post_view, pss))



let run_thread_start_instruction
      params
      isa
      ((s,(ii,view,o)) : iconf 'i 'v)
      (pss_sem : pss_sem 'pss 'v)
      (pss : 'pss)
      : list (pt_trans 'i (pts 'i 'v) 'pss 'v)
  = 

  let (s,(ii,view,tsi_addr_rv)) =
    read_reg (s,(ii,view,id)) isa.thread_start_info.tsi_addr in
  let tsi_addr_mv = memory_value_of_register_value tsi_addr_rv in
  let (s,w) = make_thread_start_write_events isa s ii tsi_addr_mv in

  (* let (s,(ii,view,tsi_toc_rv)) =
   *   match isa.thread_start_info.tsi_toc with
   *   | Just tsi_toc -> read_reg (s,(ii,view,fun rv -> Just rv)) tsi_toc
   *   | Nothing -> (s,(ii,view,Nothing))
   * end in *)

  (* let (s,(ii,view,tsi_extra_rv)) =
   *   match isa.thread_start_info.tsi_extra with
   *   | Just tsi_extra -> read_reg (s,(ii,view,fun rv -> Just rv)) tsi_extra
   *   | Nothing -> (s,(ii,view,Nothing))
   * end in *)

  let dep_view = view in

  let pre_view = joinS [dep_view; s.vCAP; s.vWp] in
  let req_view = join pre_view (vCoh thread_start_write_address s) in

  let wd = <| wd_w = w; 
              wd_rexinfo = Nothing; 
              wd_req_view = req_view;
              wd_is_thread_start = true |> in
  let c (post_view,mtid) = 
    let s = 
      <| s with vCoh = inc_vmap s.vCoh thread_start_write_address post_view;
                vCAP = join s.vCAP dep_view;
                vWm  = join s.vWm post_view;
                promises = remove_promise w.weiid s.promises
      |>
    in
    let new_tid = match mtid with
      | Just new_tid -> integerFromNat new_tid
      | Nothing      -> ~1
    end in
    let tsi_return = isa.thread_start_info.tsi_return in
    let new_tid_rv = register_value_for_reg_of_integer tsi_return new_tid in
    let (s,(ii,view,o)) =
      write_reg (s,(ii,view,o)) (tsi_return,new_tid_rv,post_view) in
    fst (finish_non_branch_instruction isa (s,(ii,view,o)))
  in
  if exists ((p,_,_,_) IN s.promises). p = w.weiid then
    pss_sem.handle_fulfil pss wd >>= fun (post_view,mtid) ->
    return (PT_Fulfil (s.tid,ii.ii_ioid) wd (post_view,mtid) (c (post_view,mtid)))
  else
    pss_sem.handle_write pss wd Shared >>= fun (post_view,pss,mtid) ->
    return (PT_Write (s.tid,ii.ii_ioid) (wd,NonPromise,Shared)
              (post_view,mtid) (c (post_view,mtid), pss))



let run_store_exclusive_instruction params isa 
      ((s,(ii,view,o)) : iconf 'i 'v)
      (pss_sem : pss_sem 'pss 'v)
      (pss : 'pss) = 
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  let c = ensure_excl_res_outcome o in
  run_failed_store_exclusive_instruction isa (s,(ii,view,c false))
  ++
  (option_guard s.xcl_bank >>= fun rxinfo ->
   run_store_instruction params isa (Just rxinfo) (s,(ii,view,c true)) pss_sem pss)


let run_flush_instruction isa ((s,(ii,view,o)) : iconf 'i 'v) =
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  let ((cok,addr),o) = ensure_flush_outcome o in
  let addr = addr_of_addr_lifted addr in
  let lper = match cok with
    | Cache_op_D_CVAP ->
        let v = join (Map.findWithDefault addr bot s.vCoh) s.vPn in
        inc_vmap s.vlPer addr v
    | _ -> s.vlPer
    end in
  let s = <| s with vlPer = lper; |> in
  let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
  make_plain_transition (finish_non_branch_instruction isa (s,(ii,view,o)))



let initialise_instruction isa s (addr,opcode,instr) = 
  let o = isa.instruction_semantics.initial_outcome_of_instruction instr in
  let (ioid,ids) = gen_fresh_id s.ids in
  let ii = init_instruction_info ioid addr opcode instr in
  let s = <| s with ids = ids |> in
  (s,(ii,bot,o))

let run_instruction
    (params : model_params)
    (isa : isa 'i)
    (s : pts 'i 'v)
    (pss_sem : pss_sem 'pss 'v)
    (pss : 'pss)
    ((addr,opcode,instr) : (address * maybe opcode * 'i))
  : list (pt_trans 'i (pts 'i 'v) 'pss 'v) = 
  let (s,(ii,view,o)) = initialise_instruction isa s (addr,opcode,instr) in
  if isa.is_branch instr then 
    run_branch_instruction params isa (s,(ii,view,o))
  else  if isa.is_thread_start_instruction instr then 
    run_thread_start_instruction params isa (s,(ii,view,o)) pss_sem pss
  else
    let (s,(ii,view,o)) = do_local_effs (s,(ii,view,o)) in
    match o with
    | O_Done _ -> run_plain_instruction isa (s,(ii,view,o))
    | O_Read_mem _ _ -> run_load_instruction params isa (s,(ii,view,o)) pss_sem pss
    | O_Write_ea _ _ ->
       if isa.is_amo instr
       then run_amo_instruction isa (s,(ii,view,o))
       else run_store_instruction params isa Nothing (s,(ii,view,o)) pss_sem pss
    | O_Barrier _ _ -> run_barrier_instruction isa (s,(ii,view,o))
    | O_Excl_res _ -> run_store_exclusive_instruction params isa (s,(ii,view,o)) pss_sem pss
    | O_Cache_op _ _ -> run_flush_instruction isa (s,(ii,view,o))
    | _ -> fail
    end

let fail_fetch s (fde : fetch_and_decode_exception 'i) = 
  let e = ET_fetch_and_decode fde in
  PT_exception (s.tid,(head s.instrs).ii_ioid) e s

let run_addr params isa
      (s : pts 'i 'v)
      (pss_sem : pss_sem 'pss 'v)
      (pss : 'pss)
      addr = 
  match s.prog addr with
  | FDO_address_not_concrete ->
     return (fail_fetch s (FDE_non_concrete_fetch_address_error))
  | FDO_illegal_fetch_address ->
     return (fail_fetch s (FDE_illegal_fetch_address_error addr))
  | FDO_decode_error de ->
     return (fail_fetch s (FDE_decode_error de addr))
  | FDO_success _ opcode instr -> 
     if params.t.thread_fail_on_loop &&
        exists (i MEM s.instrs). i.ii_program_loc = addr
     then failwith "found loop"
     else run_instruction params isa s pss_sem pss (addr,opcode,instr) 
  | FDO_unpredictable_fetch -> failwith "FDO_unpredictable_fetch"
  end
   


let quick_detect_deadlock ts = 
  exists ((wid,v,addr,_) IN ts.promises). 
  not ((joinS [ts.vWp;ts.vCAP;vCoh addr ts]) < v)


let quick_quick_detect_deadlock ts = 
  exists ((wid,v,addr,_) IN ts.promises). not (ts.vCAP < v)


(* copying over logic from start_thread in MachineDefSystem *)
let start_thread_and_run params isa ts pss_sem pss mv view =
  
  let updates = 
    let tsi_f_tid = isa.thread_start_info.tsi_f_tid in
    let tid = integerFromNat ts.tid in
    let rv_new_tid = register_value_for_reg_of_integer tsi_f_tid tid in
    [(register_base_name tsi_f_tid,rv_new_tid)]
  in

  let updates = match isa.thread_start_info.tsi_f_addr with
    | Just tsi_f_addr ->
       let tsi_f_addr_bn = register_base_name tsi_f_addr in
       let dir = direction_of_reg_name tsi_f_addr in
       let addr_rv = register_value_of_memory_value mv dir in
       (tsi_f_addr_bn,addr_rv) :: updates
    | _ -> updates
  end in

  (* let tsi_f_toc = isa.thread_start_info.tsi_f_toc in *)
  (* let updates = match (tsi_f_toc, rv_toc) with
   *   | (Just tsi_f_toc, Just rv_toc) ->
   *      (register_base_name tsi_f_toc,rv_toc) :: updates
   *   | _ -> updates
   * end in *)
  let ts = p_update_initial_register_state ts updates in
  let (ts,addr) = p_update_initial_fetch_address isa ts mv in
  let ts = <| ts with vWm = view; vWp = view; vRm = view;
                      vRp = view; vCAP = view |> in
  run_addr params isa ts pss_sem pss addr



let next_instruction_transitions_of_thread
    (params : model_params)
    (isa: isa 'i)
    (s : pts 'i 'v)
    (pss_sem : pss_sem 'pss 'v)
    (pss : 'pss)
  : list (pt_trans 'i (pts 'i 'v) 'pss 'v) =
  match s.cia with
  | Just cia ->
     guard (cia <> s.retAddr &&
            isNothing s.raised_exception &&
            not (quick_quick_detect_deadlock s)) >>
     run_addr params isa s pss_sem pss cia
  | Nothing ->
     pss_sem.handle_can_thread_start pss s.tid >>= fun (mv,v) ->
     start_thread_and_run params isa s pss_sem pss mv v
  end


(* fix the params.thread_run_after_stop_promising case *)
let is_final_tstate params (s : pts 'i 'v) : bool =
  isJust s.raised_exception ||
  (Set.null s.promises && s.cia = Just s.retAddr)

