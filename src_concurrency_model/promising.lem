(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Christopher Pulte, University of Cambridge 2017-2018               *)
(*  Copyright Shaked Flur, University of Cambridge            2017               *)
(*  Copyright Jon French, University of Cambridge             2018               *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

open import Relation
open import Pervasives_extra
open import Sail_impl_base
open import InstructionSemantics
open import FreshIds
open import Events
open import Fragments
open import Debug
open import ExceptionTypes
open import Utils
open import Params
open import Isa
open import RegUtils
open import CandidateExecution
     import Map
open ListMonad
open import PromisingViews
open import PromisingTransitions
open import PromisingThread
open import PromisingStorage



type p_state 'i 'ts 'ss 'v =
  <| p_program_memory:        (address -> fetch_and_decode_outcome 'i);
     p_initial_writes:        list write;
     p_thread_states:         map thread_id 'ts;
     p_shared_locations:      list footprint;
     p_storage_state:         'ss;
     p_model:                 model_params;
     p_isa:                   isa 'i;
     p_stopped_promising:     bool;
     p_pss_sem:               pss_sem 'ss 'v;
     
     p_follow_trace:          pt_follow_trace 'i 'v;
  |>




(* type pts' 'i = pts 'i t *)

let rec shared_locations_of_footprint params (addr, sz) =
  if sz <= 8
  then
    let fp = (addr, sz) in
    if in_shared_memory params fp then [fp] else []
  else
    let fp = (addr, 8) in
    let fp' = (add_address_nat addr 8, sz - 8) in
    if in_shared_memory params fp
    then fp :: shared_locations_of_footprint params fp'
    else shared_locations_of_footprint params fp'

let p_initial_state
    (register_data:           registerdata)
    (state_record:            initial_state_record 'i)
    : p_state 'i (pts 'i t) pss t
  =
  let prog = state_record.isr_program state_record.isr_isa.instruction_semantics in

  let initial_thread_states = 
    let init tid =
      PromisingThread.p_initial_thread_state
        state_record.isr_isa
        tid
        prog
        (ensure_just (List.lookup tid state_record.isr_return_addr)
           "missing return address for thread")
        register_data
        (state_record.isr_register_data tid)
        (state_record.isr_register_values register_data tid)
        (state_record.isr_first_instruction tid)
        state_record.isr_memory
    in
    [(tid, init tid) | forall (tid MEM state_record.isr_thread_ids) | true]
  in

  let threads_active =
    List.map (fun tid ->
        (tid, isJust (state_record.isr_first_instruction tid)))
      state_record.isr_thread_ids
  in

  let shared_locations =
    List.concat
      (List.map
        (fun w -> shared_locations_of_footprint state_record.isr_params w.w_addr)
        state_record.isr_memory)
  in

  <| p_program_memory    = prog;
     p_initial_writes    = state_record.isr_memory;
     p_thread_states     = Map.fromList initial_thread_states;
     p_storage_state     = PromisingStorage.pss_initial_state
                             threads_active
                             state_record.isr_memory;
     p_shared_locations  = shared_locations;
     p_model             = state_record.isr_params;
     p_isa = state_record.isr_isa;
     p_stopped_promising = false;
     p_pss_sem = pss_sem;

     p_follow_trace = [];
  |>



(*** System ********************************************************************)

let promise_write 
      (pss_sem : pss_sem 'pss 'v)
      (pts : pts 'i 'v)
      (pss : 'pss)
      (wd : writedata 'v)
      shared 
    : list (pt_trans 'i (pts 'i 'v) ('pss) 'v) = 
  pss_sem.handle_write pss wd shared >>= fun (v,pss',mtid) ->
  let pts' = 
    let promise = (wd.wd_w.weiid,v,fst wd.wd_w.w_addr, wd.wd_is_thread_start) in
    <| pts with promises = Set.insert promise pts.promises |>
  in
  return (PT_Write (wd.wd_w.w_thread, wd.wd_w.w_ioid) 
            (wd,Promise,shared) (v,mtid) (pts',pss'))



type certjob 'pts 'pss 'v =
  <| CJpts : 'pts;
     CJpss : 'pss;
     CJpromises : set (writedata 'v);
     CJfulfilled : bool;
     CJcert_no_write : bool;
     CJfuel : maybe nat; 
     CJpss_view : 'v;
  |>

type cert 'v = 
  | NotCertified
  | Certified of bool * set (writedata 'v)

let promisable = (le)


let fuel_empty = function
  | Nothing -> false
  | Just (f : nat) -> f <= 0
end

let warn_empty_fuel () = 
  print_endline "\nWarning: ran out of fuel\n"


let certjob_after_t
    (cj : certjob (pts 'i 'v) 'pss 'v)
    (trans : pt_trans 'i (pts 'i 'v) 'pss 'v)
  : certjob (pts 'i 'v) 'pss 'v
  = 
  let (pts',pss') = tconf_after_pt_trans (cj.CJpts,cj.CJpss) trans in
  let shared_wds = Set.fromList (wd_of_shared_pt_write_trans trans) in
  let newp = {wd | forall (wd IN shared_wds) 
                 | promisable wd.wd_req_view cj.CJpss_view} in
  let promises = newp union cj.CJpromises in
  let cert_no_write = cj.CJcert_no_write && Set.null shared_wds in
  <| cj with CJpts = pts';
             CJpss = pss';
             CJpromises = promises;
             CJfuel = Maybe.map (fun f -> f - 1) cj.CJfuel; 
             CJcert_no_write = cert_no_write |>

let rec certprom_s params
    (isa : isa 'i)
    (pss_sem : pss_sem 'pss 'v)
    (cjs : list (certjob (pts 'i 'v) 'pss 'v))
    (cert : cert 'v)
  : cert 'v =
  match cjs with
  | [] -> cert
  | cj :: cjs ->
    let fulfilled = cj.CJfulfilled || Set.null cj.CJpts.promises in
    let next_transitions = 
      if fuel_empty cj.CJfuel then
        let () = warn_empty_fuel () in []
      else
        next_instruction_transitions_of_thread params
          isa cj.CJpts pss_sem cj.CJpss
    in 
    let cj = <| cj with CJfulfilled = fulfilled |> in
    let new_cjs =
      List.map (certjob_after_t cj) next_transitions in
    if not (List.null next_transitions) then
      certprom_s params isa pss_sem (new_cjs ++ cjs) cert
    else if not fulfilled then
      certprom_s params isa pss_sem cjs cert
    else
      let cert = 
        match cert with
        | NotCertified -> Certified cj.CJcert_no_write cj.CJpromises
        | Certified cert_no_write promises ->
           Certified (cert_no_write || cj.CJcert_no_write) 
                     (promises union cj.CJpromises)
        end in
      certprom_s params isa pss_sem cjs cert
  end




let certprom_transition params isem
      (pss_sem : pss_sem 'pss 'v)
      (pts : pts 'i 'v)
      (pss : 'pss)
      tr
  = 
  (* let fulfilled = Set.null pts.promises in *)
  let no_write = List.null (wd_of_shared_pt_write_trans tr) in
  (* let cert = if fulfilled then Certified no_write Set.empty else NotCertified in *)
  let (pts',pss') = (tconf_after_pt_trans (pts,pss) tr) in
  let cj = <| CJpts = pts';
              CJpss = pss';
              CJpromises = Set.empty;
              CJfulfilled = false;
              CJfuel = params.t.p_fuel;
              CJcert_no_write = no_write;
              CJpss_view = pss_sem.pss_view pss;
           |> in
  certprom_s params isem pss_sem [cj] NotCertified



(* If the same promise can be done with different required views, only
   enumerate transitions for with biggest required view. In the
   timestamp case whether minimal/maximal or maximal is not important
   (just need a unique one), since this "locally required view" does
   not matter: we do not record that view but the view of memory
   "before" doing this write. In the write-ids model it does
   matter. Picking the promise(s) with maximal view constrains the
   storage subsystem the most. But that strongest constraint on the
   storage subsystem should still be weaker than the corresponding
   storage state in the timestamp model. *)
let prune_promises promises = 
  {p | forall (p IN promises)
     | not (exists (p' IN promises).
       (p.wd_w = p'.wd_w &&
        p.wd_rexinfo = p'.wd_rexinfo &&
        p'.wd_req_view <> p.wd_req_view &&
        le p.wd_req_view p'.wd_req_view))
  }


let p_enumerate_transitions_of_thread
    (params : model_params)
    (isa : isa 'i)
    (pts : pts 'i 'v)
    (pss_sem : pss_sem 'pss 'v)
    (pss : 'pss)
    : list (pt_trans 'i (pts 'i 'v) 'pss 'v * bool) = 

  let trs = next_instruction_transitions_of_thread params isa pts pss_sem pss in
  let (transitions,promises) = 
    List.foldl 
      (fun (trs,prms) tr ->
        match certprom_transition params isa pss_sem pts pss tr with
        | NotCertified -> (trs,prms)
        | Certified cert_no_write promises ->
           ((tr,cert_no_write) :: trs, prms union promises)
        end
      ) ([],Set.empty) trs 
  in

  let promises = Set_extra.toList (prune_promises promises) in

  let promise_transitions = 
    promises >>= fun wd ->
    promise_write pss_sem pts pss wd Shared >>= fun tr ->
    return (tr,false) in
  transitions ++ promise_transitions


let rec enumerate_possible_final_states_aux
    (params : model_params)
    (isa : isa 'i)
    (pss_sem : pss_sem 'pss 'v)
    (traces_found : list (pts 'i 'v * 'pss * pt_follow_trace 'i 'v))
    (todo : list (pt_follow_trace 'i 'v * pts 'i 'v * 'pss))
        : list (pts 'i 'v * 'pss * pt_follow_trace 'i 'v)
  =
  match todo with
  | [] -> List.reverse traces_found
  | (inv_trace_so_far, pts, pss) :: todo ->
     if is_final_tstate params.t pts
     then
       let traces_found' = (pts,pss,List.reverse inv_trace_so_far) :: traces_found in
       enumerate_possible_final_states_aux params isa pss_sem traces_found' todo
     else
       (* guard (quick_detect_deadlock pss pts) >> *)
       let new_jobs = 
         next_instruction_transitions_of_thread params isa pts pss_sem pss >>= fun tr ->
         guard (not (is_shared_pt_write_trans tr)) >>
         let (pts,pss) = tconf_after_pt_trans (pts,pss) tr in
         let follow_label = pt_follow_label_of_pt_trans tr in
         let inv_trace_so_far' = follow_label :: inv_trace_so_far in
         return (inv_trace_so_far',pts,pss)
       in
       let todo' = todo ++ new_jobs in
       enumerate_possible_final_states_aux params isa pss_sem traces_found todo'
  end

let enumerate_possible_final_states
    (params : model_params)
    (isa : isa 'i)
    (pss_sem : pss_sem 'pss 'v)
    (pts : pts 'i 'v)
    (pss : 'pss)
    : list (pts 'i 'v * 'pss * pt_follow_trace 'i 'v)
  =
  let jobs = [([],pts,pss)] in
  enumerate_possible_final_states_aux params isa pss_sem [] jobs





val merge_combination :
  forall 'i 'v 'pss.
  pss_sem 'pss 'v ->
  list (thread_id * (pts 'i 'v * 'pss * pt_follow_trace 'i 'v)) ->
  map thread_id (pts 'i 'v) * 'pss * pt_follow_trace 'i 'v
let merge_combination pss_sem combination =
  match combination with
    | [] -> failwith "merge_combinations"
    | (tid,(pts,pss,trace)) :: rest ->
       let add (ptss,pss,trace) (tid',(pts',pss',thread_trace)) =
         (Map.insert tid' pts' ptss,
          pss_sem.merge_pss_states pss pss',
          trace ++ thread_trace)
       in
       List.foldl add (Map.singleton tid pts, pss, trace) rest
  end



val all_combinations : forall 'a 'b. list ('a * list 'b) -> list (list ('a * 'b))
let rec all_combinations l = 
  match l with
  | [] -> [[]]
  | (a, bs) :: rest ->
     [(a,b) :: combinations 
        | forall (b MEM bs) (combinations MEM all_combinations rest) | true]
  end


let enumerate_finalise_transitions
      (state : p_state 'i (pts 'i 'v) 'pss 'v)
    : list (p_trans 'i (pts 'i 'v) 'pss 'v)
  = 
  if Map.all (fun _ ts -> is_final_tstate state.p_model.t ts) state.p_thread_states
  then []
  else
    let pss = state.p_storage_state in
    let ptss = Map_extra.toList state.p_thread_states in
    let (final_states_per_thread : list (thread_id * (list (pts 'i 'v * 'pss * pt_follow_trace 'i 'v)))) =
      List.map (fun (tid,pts) ->
          (tid, enumerate_possible_final_states state.p_model state.p_isa
                  state.p_pss_sem pts pss)) ptss
    in
    let (combs : list (list (thread_id * (pts 'i 'v * 'pss * pt_follow_trace 'i 'v)))) = 
      all_combinations final_states_per_thread in
    let merged_combs = List.map (merge_combination state.p_pss_sem) combs in
    List.map (fun (ptss, pss, trace) -> PSys_finish ptss pss trace) merged_combs


let p_enumerate_follow_transition
      (state : p_state 'i (pts 'i 'v) 'pss 'v)
      (l : pt_follow_label 'i 'v)
    : list (p_trans 'i (pts 'i 'v) 'pss 'v) =

  let tid = tid_of_pt_trans l in
  let ts = Map_extra.find tid state.p_thread_states in
  let pt_trans =
    next_instruction_transitions_of_thread
      state.p_model
      state.p_isa
      ts
      state.p_pss_sem
      state.p_storage_state
  in
  match List.filter (pt_trans_matches_pt_follow_label l) pt_trans with
  | [t] -> [PT t]
  | [] -> failwith ("could not follow, that transition does not exist: " ^ show l)
  | _  -> failwith ("could not follow, matched multiple transitions: " ^ show l)
  end

  
let p_enumerate_transitions_of_threads state = 
  Map.map
    (fun ts ->
      p_enumerate_transitions_of_thread
        state.p_model
        state.p_isa
        ts
        state.p_pss_sem
        state.p_storage_state 
    )
    state.p_thread_states

let p_normally_enumerate_transitions
      (state: p_state 'i (pts 'i 'v) 'pss 'v)
    : list (p_trans 'i (pts 'i 'v) 'pss 'v)
  =

  let map_thread_transitions = p_enumerate_transitions_of_threads state in

  let can_stop_promising = 
    not state.p_stopped_promising &&
    state.p_model.t.p_promise_first &&
    Map.all (fun tid trs ->
        let ts = Map_extra.find tid state.p_thread_states in
        is_final_tstate state.p_model.t ts || 
          List.any snd trs)
      map_thread_transitions
  in

  let filter (tr,cert_no_write) = 
    if state.p_stopped_promising then
      cert_no_write && not (is_shared_pt_write_trans tr)
    else if state.p_model.t.p_promise_first then
      is_shared_pt_write_trans tr
    else true
  in

  let thread_transitions = 
    List.filter filter
      (Map_extra.fold  (fun _ trs acc -> acc ++ trs) map_thread_transitions [])
  in
  let thread_transitions = List.map (fun (t,_) -> PT t) thread_transitions in

  if can_stop_promising then PSys_stop_promising :: thread_transitions
  else thread_transitions

   


let p_enumerate_transitions (state: p_state 'i (pts 'i 'v) 'pss 'v)
    : list (p_trans 'i (pts 'i 'v) 'pss 'v)
  =
  match state.p_follow_trace with
  | [] ->
    if state.p_stopped_promising && state.p_model.t.p_par_pts_search
    then enumerate_finalise_transitions state
    else p_normally_enumerate_transitions state
  | t :: _ ->  p_enumerate_follow_transition state t
  end




let p_priority_transitions s (_: eager_mode) :
      list ((p_trans 'i 'ts 'ss 'v -> bool) * bool) =
  match s.p_model.t.thread_model with
  | Promising_thread_model -> (* also see optimised transition enumeration *)
     if s.p_stopped_promising then [(fun t -> true, true)]  else []
  | _ -> []
end







let p_number_of_instructions s = 
  Map_extra.fold (fun _tid pts n -> n + (List.length pts.instrs)) s.p_thread_states 0

let p_is_ioid_finished (target_ioid : ioid) s : bool =
  let (thread_id, inst_id) = target_ioid in
  let thread = ensure_just (Map.lookup thread_id s.p_thread_states)
                           "No such thread" in
  isJust (List.find (fun i -> i.ii_ioid = target_ioid) thread.instrs)


type pst 'i 'ts 'ss 'v =
  <| pst_state: p_state 'i 'ts 'ss 'v;
     pst_trans: list (p_trans 'i 'ts 'ss 'v);
  |>


let pst_of_state s =
  <| pst_state = s; 
     pst_trans = p_enumerate_transitions s |>




let pstate_after_transition 
      (s : p_state 'i (pts 'i 'v) 'pss 'v)
      (t: p_trans 'i (pts 'i 'v) 'pss 'v)
    : p_state 'i (pts 'i 'v) 'pss 'v =
  let s' = 
    match t with
    | PSys_stop_promising -> 
       <| s with p_stopped_promising = true |>
    | PSys_finish ptss pss trace -> 
       if s.p_model.t.p_par_pts_search_follow_trace 
       then <| s with p_follow_trace = trace |>
       else <| s with p_thread_states = ptss; p_storage_state = pss |>
    | PT t -> 
       let tid = tid_of_pt_trans t in
       let pts = Map_extra.find tid s.p_thread_states in
       let (pts,pss) = tconf_after_pt_trans (pts,s.p_storage_state) t in
       <| s with p_thread_states = Map.insert tid pts s.p_thread_states;
                 p_storage_state = pss |>
    end
  in
  if s.p_follow_trace = [] then s'
  else <| s' with p_follow_trace = List_extra.tail s.p_follow_trace |>
 



let pst_after_transition
    (s:         pst 'i (pts 'i 'v) 'pss 'v)
    (t:         p_trans 'i (pts 'i 'v) 'pss 'v)
    : transition_outcome 'i (pst 'i (pts 'i 'v) 'pss 'v)
  =
  match t with
  | PT (PT_exception (tid,ioid) e _) ->
     TO_unhandled_exception tid ioid e
  | _ ->
     TO_system_state (pst_of_state (pstate_after_transition s.pst_state t))
  end


let p_is_final_state (s : p_state 'i (pts 'i 'v) 'pss 'v) : bool =
  s.p_model.t.p_promise_first --> s.p_stopped_promising &&
  (* quantify over list rather than set to avoid needing set type for thread states *)
  (forall ((_,ts) MEM (Map_extra.toList s.p_thread_states)).
   PromisingThread.is_final_tstate s.p_model.t ts)




(* This does not produce all the information cex would like to have,
   should fix later *)
let p_make_cex_instruction_info
    (* (_prefix: list (instruction_info 'i)) *)
    (i:      instruction_info 'i)
    : cex_instruction_instance 'i
  =
  <|
    cex_instance_ioid = i.ii_ioid;
    cex_program_loc = i.ii_program_loc;
    cex_program_opcode = i.ii_program_opcode;
    cex_instruction = Fetched i.ii_instruction;
    cex_instruction_kind = i.ii_kind;
    (* register part *)
    cex_regs_in = Set.fromList (List.map fst i.ii_reg_reads);
    cex_regs_out = Set.fromList (List.map fst i.ii_reg_writes);
    cex_regs_in_feeding_address = Set.fromList i.ii_regs_feeding_address;
    cex_ioids_feeding_address = Set.empty;
    cex_reg_reads = List.map (fun (r,v) -> (r,[],v)) i.ii_reg_reads;
    cex_reg_writes = i.ii_reg_writes;
    (* memory part *)
    cex_writes_read_from = Set.fromList (List.concatMap snd i.ii_writes_read_from);
    cex_committed_barriers = [];
    cex_potential_write_addresses = [];
    cex_potential_writes = [];
    cex_propagated_writes = i.ii_propagated_writes;
    cex_requested_unsatisfied_reads = [];
    cex_satisfied_reads =
      List.mapMaybe
        (fun (rr, writes_read_from) ->
          let mrs =
            <|  mrs_footprint        = rr.r_addr;
                mrs_value            = value_of_write_slices writes_read_from;
                mrs_writes_read_from = writes_read_from;
            |>
          in
          Just (rr, mrs)
        )
        i.ii_writes_read_from;
    (* status *)
    cex_finished = true;

    (* dependencies *)
    cex_address_dependencies = Set.empty;
    cex_data_dependencies = Set.empty;
    cex_control_dependencies = Set.empty;
    cex_paired_atomic_load = Nothing;
  |>


let p_make_cex_instruction_tree (iis:list (instruction_info 'i)) : cex_instruction_tree 'i =
  List.foldr (fun ii t -> CEX_T [(p_make_cex_instruction_info ii,t)]) (CEX_T []) iis


let p_make_cex_thread_state (t : pts 'i 'v) : cex_thread_state 'i = 
  <| cex_thread = t.tid;
     cex_register_data = t.regdata;
     cex_initial_register_state = t.initRegS;
     cex_initial_fetch_address = t.initAddr;
     cex_instruction_tree = p_make_cex_instruction_tree t.instrs;
  |>

val p_make_cex_candidate : forall 'i 'v. p_state 'i (pts 'i 'v) pss 'v -> cex_candidate 'i
let p_make_cex_candidate s : cex_candidate 'i =
  let rf =
    let instructions =
      Map.map (fun t -> Set.fromList t.instrs) s.p_thread_states $>
      Map.range $> Set.bigunion 
    in
    Set.bigunionMap
      (fun i ->
        List.concatMap
          (fun (r, wss) -> [(ws, r) | forall (ws MEM wss) |true])
          i.ii_writes_read_from
        $> Set.fromList
      )
      instructions
  in

  let co = pss_coherence s.p_storage_state in

  <|
    cex_program_memory = s.p_program_memory;
    cex_initial_writes = s.p_initial_writes;
    cex_threads = Map.map p_make_cex_thread_state s.p_thread_states;
    cex_rf = rf;
    cex_co = Relation.withoutTransitiveEdges co;
    cex_fr = CandidateExecution.fr_from_rf_co rf co;
    cex_model = s.p_model;
  |> 


let p_branch_targets_of_state _  : branch_targets_map = Map.empty
let p_shared_memory_of_state _ : set footprint = Set.empty
let p_modified_code_locations_of_state _ : set footprint = Set.empty


let join_vmap vmap1 vmap2 =
  Map.mapi
    (fun addr v1 -> join v1 (Map.findWithDefault addr bot vmap2))
    vmap1

let possible_final_nvm_values_aux fp v memory: list write =
  let addr_writes = [(w,t) | forall ((w,t,_) MEM memory)
                           | sub_footprint fp w.w_addr] in
  let (after,before) = splitWhile (fun (w,wt) -> wt > v) addr_writes in
  let ws = match before with
    | w::ws -> w :: after
    | [] -> after
    end
  in
  let () = ensure (ws <> []) "no write to read from found" in
  List.map (fun (w, wt) -> w) ws

let p_possible_final_nvm_values (s: p_state 'i (pts 'i t) pss t) =
  let p_commit =
    Map_extra.fold
      (fun _ ts v -> join_vmap ts.vPCommit v)
      s.p_thread_states
      Map.empty
  in
  let memory = s.p_storage_state.pss_memory in
  let footprints = s.p_shared_locations in
  List.map
    (fun (addr, sz) ->
      let l = possible_final_nvm_values_aux
                (addr, sz) (Map.findWithDefault addr bot p_commit) memory in
      let value_of fp w =
        let mrs = ensure_just (mrs_from_writes fp [write_with_complete_slice w])
                    "p_possible_final_nvm_values" in
        mrs.mrs_value
      in
      ((addr, sz), List.map (fun w -> value_of (addr, sz) w) l))
    footprints


(* To easier refer to these in OCaml .. *)
let type_specialised_p_pst_of_state (s : p_state 'i (pts 'i t) pss t) = pst_of_state s
let type_specialised_p_is_final_state (s : p_state 'i (pts 'i t) pss t) = p_is_final_state s
let type_specialised_pst_after_transition
      (s:         pst 'i (pts 'i t) pss t)
      (t:         p_trans 'i (pts 'i t) pss t)
  = pst_after_transition s t
