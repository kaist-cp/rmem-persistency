(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Jon French, University of Cambridge                2018            *)
(*  Copyright Christopher Pulte, University of Cambridge    2017-2018            *)
(*  Copyright Shaked Flur, University of Cambridge          2017-2018            *)
(*  Copyright Robert Norton-Wright, University of Cambridge      2017            *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

open import Pervasives_extra

(* emacs fontification -*-caml-*- *)

open import Sail_impl_base
open import Utils
open import Sail_values



type instruction 'i = 
  | Unfetched
  | Fetched of 'i
  | Fetch_error

let ensure_fetched = function
  | Fetched instr -> instr
  | Unfetched -> failwith "ensure_fetch: Unfetched"
  | Fetch_error -> failwith "ensure_fetch: Fetch_error"
end

type decode_error_t 'i =
  | Unsupported_instruction_error of opcode * 'i
  | Not_an_instruction_error of opcode
  | Internal_decode_error of string

type fetch_and_decode_outcome 'i =
  | FDO_success of address * (maybe opcode) * 'i
  | FDO_address_not_concrete
  | FDO_illegal_fetch_address
  | FDO_unpredictable_fetch
  | FDO_decode_error of decode_error_t 'i


let is_fdo_success = function
  | FDO_success _ _ _ -> true
  | _ -> false
end

let ast_from_fdo = function
  | FDO_success _ _ ast -> Just ast
  | _ -> Nothing
end

let unsafe_ast_from_fdo fdo =
  ensure_just (ast_from_fdo fdo) "fail"


let decode_error_compare e1 e2 =
  match (e1, e2) with
  (* we assume 'opcode' deterministically defines 'instruction_ast' so we only
  compare 'opcode', also it's hard to auto-gen compare for 'instruction_ast' *)
  | (Unsupported_instruction_error a1 _, Unsupported_instruction_error a2 _)
      -> compare a1 a2
  | (Unsupported_instruction_error _ _, _) -> LT
  | (_, Unsupported_instruction_error _ _) -> GT

  | (Not_an_instruction_error o1, Not_an_instruction_error o2) -> compare o1 o2
  | (Not_an_instruction_error _, _) -> LT
  | (_, Not_an_instruction_error _) -> GT

  | (Internal_decode_error s1, Internal_decode_error s2) -> compare s1 s2
  end

let decode_error_less e1 e2       = decode_error_compare e1 e2 =  LT
let decode_error_less_eq e1 e2    = decode_error_compare e1 e2 <> GT
let decode_error_greater e1 e2    = decode_error_compare e1 e2 =  GT
let decode_error_greater_eq e1 e2 = decode_error_compare e1 e2 <> LT

instance forall 'i. (Ord (decode_error_t 'i))
  let compare = decode_error_compare
  let (<)  = decode_error_less
  let (<=) = decode_error_less_eq
  let (>)  = decode_error_greater
  let (>=) = decode_error_greater_eq
end

let {coq; ocaml} decode_error_equal e1 e2 = (decode_error_compare e1 e2) = EQ
(* let inline {hol; isabelle} decode_error_equal = unsafe_structural_equality *)

let {coq; ocaml} decode_error_inequal e1 e2 = not (decode_error_equal e1 e2)
(* let inline {hol; isabelle} decode_error_inequal = unsafe_structural_inequality *)

instance forall 'i.  (Eq decode_error_t 'i)
  let (=)  = decode_error_equal
  let (<>) = decode_error_inequal
end

type fp_analysis = (list reg_name * list reg_name * list reg_name * list nia * dia * instruction_kind)
type register_environment = list (reg_name * register_value)
type register_info = string -> (Maybe.maybe string) -> (nat*nat*direction*(nat*nat))


type instruction_semantics 'i =
  <|  decode_to_instruction : address -> opcode -> fetch_and_decode_outcome 'i;
  
      encode_instruction: 'i -> end_flag -> memory_value;

      initial_outcome_of_instruction : 'i -> outcome unit;

      instruction_analysis :  (*bool is whether or not to re-analyse*) 
        'i -> bool -> register_info -> register_environment -> fp_analysis;
  |>



(* process analysis as returned from hand-written sail function *)
let process_analysis reginfo (iregs,oregs,address_feeding_regs,nias,dia,ik) = 
  (List.map (regfp_to_reg reginfo) iregs,
   List.map (regfp_to_reg reginfo) oregs,
   List.map (regfp_to_reg reginfo) address_feeding_regs,
   List.map (niafp_to_nia reginfo) nias,
   diafp_to_dia reginfo dia,
   ik)

let print_register_environment environment = 
  "[" ^ String.concat ", " (List.map show (List.map fst environment)) ^ "]"

val handle_reg_reads : forall 'a. list (reg_name * register_value) -> outcome 'a -> 'a
let rec handle_reg_reads environment outcome = match outcome with
  | O_Read_reg reg_name c ->
     let regval = match List.lookup reg_name environment with
       | Just v -> v
       | Nothing -> 
          failwith ("no value in environment for register " ^  show reg_name ^ " in list " ^
                      print_register_environment environment)
     end in
     handle_reg_reads environment (c regval)
  | O_Fail (Just err) -> failwith ("handle_reads: Fail " ^ err)
  | O_Fail Nothing -> failwith ("handle_reads: Fail with unspecified error")
  | O_Error string -> failwith ("handle_reads: Error " ^ string)
  | O_Done v -> v
  | _ -> failwith "handle_reg_reads: unhandled effect"
  end

let ensure_done_outcome = function
  | O_Done a -> a | _ -> fail end
let ensure_barrier_outcome = function
  | O_Barrier bk o -> (bk,o) | _ -> fail end
let ensure_write_ea_outcome = function
  | O_Write_ea descr o -> (descr,o) | _ -> fail end
let ensure_write_memv_outcome = function
  | O_Write_memv memv c -> (memv,c) | _ -> fail end
let ensure_read_mem_outcome = function
  | O_Read_mem descr c -> (descr,c) | _ -> fail end
let ensure_excl_res_outcome = function
  | O_Excl_res c -> c | _ -> fail end
let ensure_flush_outcome = function
  | O_Cache_op descr o -> (descr,o) | _ -> fail end
let ensure_write_reg_outcome = function
  | O_Write_reg descr o -> (descr,o) | _ -> fail end
let ensure_read_reg_outcome = function
  | O_Read_reg descr o -> (descr,o) | _ -> fail end






